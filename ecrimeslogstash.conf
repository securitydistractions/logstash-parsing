input {
        udp {
                port => 10514
                type => syslog
                }
        beats {
                port => 5044
                }
        }

filter {

                mutate{
                remove_field=> [ "source" ]
                }

        if "suricata" in [tags] {
                json {
                        source => "message"
                }
                date {
                match => [ "timestamp", "ISO8601" ]
                }
        #       mutate{
        #               add_field => {
        #               "url.full" => "%{origin} %{url}"
        #               }
        #               rename => ["dest_ip", "destination.ip"]
        #               rename => ["dest_port", "destination.port"]
        #               rename => ["src_ip", "source.ip"]
        #               rename => ["src_port", "source.port"]
        #               rename => ["http_method", "http.request.method"]
        #               rename => ["status", "http.response.status_code"]
        #               rename => ["hostname", "destination.domain"]
        #               rename => ["url.domain", "destination.domain"]
        #       }
        }


        if [type] == "squidlog"{
        grok {
              match => { "message" => "%{POSINT:timestamp}.%{WORD:timestamp_ms}\s+%{NUMBER:response_time} %{IP:[source][ip]} %{NUMBER:[source][port]} %{WORD:squid_request_status} %{NUMBER:[http][response][status_code]} %{NUMBER:reply_size_include_header} %{WORD:[http][request][method]} %{NOTSPACE:[url][full]} %{NOTSPACE:[url][path]} %{NUMBER:[http][version]} %{WORD:squid_response} (?:-|%{IP:[destination][ip]}) %{NOTSPACE:content_type} %{NOTSPACE:[destination][domain]}"}
        }
        }
        if [type] == "piholelog"{
        grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match=> { "message" => ["^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: query\[[\w]+\] %{domain:[destination][domain]} from %{clientip:[source][ip]}", "^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: reply %{domain:[destination][domain]} is %{ip:IP}", "^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: %{blocklist:BLOCKLIST} %{domain:[destination][domain]} is %{ip:IP}"]
                        }
                }
        }

        if [process][args]
        {
                clone {
                        clones => ["clone"]
                        add_tag => ["cloned"]
                }

        }
        if "cloned" in [tags]
        {
                split{
                        field => "[process][args]"
                }
        }
        memcached{
                        hosts => ["127.0.0.1:11211"]
                        get => {
                                "domain-%{[destination][domain]}" => "[misp][hit]"
                                "domain-%{[process][args]}" => "[misp][hit]"
                                }
                }
        if [misp][hit]
        {
        ruby {
                init => "
                        require 'net/http'
                        require 'uri'
                        require 'json'
                        "
                code => "
                        uri = URI.parse('https://192.168.30.7/attributes/restSearch')
                        request = Net::HTTP::Post.new(uri)
                        request.content_type = 'application/json'
                        request['Accept'] = 'application/json'
                        request['Authorization'] = '3P8FcSZn4cyzY2S4UHq1EUkZHbUPoDx49f1o0OMl'
                        request.body = JSON.dump({
                                'returnFormat' => 'json',
                                'includeEventTags' => 'yes',
                                'value' => event.get('[destination][domain]')
                        })

                req_options = {
                        use_ssl: uri.scheme == 'https',
                        verify_mode: OpenSSL::SSL::VERIFY_NONE,
                }

                response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
                        http.request(request)
                end

                if response.code == '200'
                        result = JSON.parse(response.body)
                        #event.set('MISP.all', result)
                        mispeventinfoarr = []
                        mispattributetagarr = []

                        for e in result['response']['Attribute']
                                for t in e['Tag']
                                mispattributetagarr.push(t['name'])
                                end
                        mispeventinfoarr.push(e['Event']['info'])
                        end
                        event.set('[misp][tags]', mispattributetagarr.uniq)
                        event.set('[misp][eventinfo]', mispeventinfoarr.uniq)

                        #for e in result['response']['Attribute']
                        #infoarr.push(e['Event']['info'])
                        #end
                        #event.set('MISP.EventInfo',infoarr.uniq)
                end
                "
        }

        if ![misp][hit]
        {
                mutate
                {
                        add_field=> {"{[misp][hit]}" => "none"}
                }
        }
}
}



output {

        if [type] == "squidlog" {
        elasticsearch {
                hosts => ["localhost:9200"]
                index => "squidv1"
                manage_template => false
                }
        }
        else if [type] == "piholelog" {
        elasticsearch{
                hosts => ["localhost:9200"]
                index => "pihole"
                manage_template => false
                }
        }
        else if "pfsense" in [tags] {
        elasticsearch{
                hosts => ["localhost:9200"]
                index => "pfsense"
                }
        }
        else if "suricata" in [tags] {
        elasticsearch{
                hosts => ["localhost:9200"]
                index => "suricata"
                }
        }
        else{
        elasticsearch{
                hosts => ["localhost:9200"]
                index => "winlogbeat-%{+YYYY.MM.dd}"
                }
        }
}
