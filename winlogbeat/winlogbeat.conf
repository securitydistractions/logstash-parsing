input {
        beats {
                port => 5043
                }
        }

filter {


        #if [process][args]
        #{
        #       clone {
        #               clones => ["clone"]
        #               add_tag => ["cloned"]
        #       }

#       }
#       if "cloned" in [tags]
#       {
#               split{
#                       field => "[process][args]"
#               }
#       }
        if [hash][md5]
        {
                memcached{
                        hosts => ["127.0.0.1:11211"]
                        get => {
                                "md5-%{[hash][md5]}" => "[misp][hit]"
                                }
                }

        if [misp][hit]
        {
        ruby {
                init => "
                        require 'net/http'
                        require 'uri'
                        require 'json'
                        "
                code => "
                        uri = URI.parse('https://192.168.30.7/attributes/restSearch')
                        request = Net::HTTP::Post.new(uri)
                        request.content_type = 'application/json'
                        request['Accept'] = 'application/json'
                        request['Authorization'] = '3P8FcSZn4cyzY2S4UHq1EUkZHbUPoDx49f1o0OMl'
                        request.body = JSON.dump({
                                'returnFormat' => 'json',
                                'includeEventTags' => 'yes',
                                'value' => event.get('[destination][domain]')
                        })

                req_options = {
                        use_ssl: uri.scheme == 'https',
                        verify_mode: OpenSSL::SSL::VERIFY_NONE,
                }

                response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
                        http.request(request)
                end

                if response.code == '200'
                        result = JSON.parse(response.body)
                        #event.set('MISP.all', result)
                        mispeventinfoarr = []
                        mispattributetagarr = []

                        for e in result['response']['Attribute']
                                for t in e['Tag']
                                mispattributetagarr.push(t['name'])
                                end
                        mispeventinfoarr.push(e['Event']['info'])
                        end
                        event.set('[misp][tags]', mispattributetagarr.uniq)
                        event.set('[misp][eventinfo]', mispeventinfoarr.uniq)

                        #for e in result['response']['Attribute']
                        #infoarr.push(e['Event']['info'])
                        #end
                        #event.set('MISP.EventInfo',infoarr.uniq)
                end
                "
        }
        }

        #if ![misp][hit]
        #{
        #       mutate
        #       {
        #               add_field=> { "[misp][hit]" => "none" }
        #       }
        #}
        }
#       if "cloned" in [tags]
#       {
#               drop {}
#       }

}



output {

        if [type] == "squidlog" {
        elasticsearch {
                hosts => ["localhost:9200"]
                index => "sd-squidproxy"
                manage_template => false
                }
        }
        else if [type] == "piholelog" {
        elasticsearch{
                hosts => ["localhost:9200"]
                index => "sd-pihole"
                manage_template => false
                }
        }
        else if "pfsense" in [tags] {
        elasticsearch{
                hosts => ["localhost:9200"]
                index => "pfsense"
                }
        }
        else if "suricata" in [tags] {
        elasticsearch{
                hosts => ["localhost:9200"]
                index => "sd-suricata"
                }
        }
        else{
        elasticsearch{
                hosts => ["localhost:9200"]
                index => "sd-winlogbeat"
                }
        }
}
