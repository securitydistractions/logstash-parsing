input {
	beats {
		port => 5001			
		}
	syslog	{
	 	port => 5045
		tags => ["pfsense"]
	 	}
	}

filter {
		 mutate{
		 remove_field=> [ "source" ]
		 }
	
	

 	if "pfsense" in [tags]{
 		grok {
       		add_tag => [ "firewall" ]
       		match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
        }

        mutate {
            gsub => ["datetime","  "," "]
        }

        date {
            match => [ "datetime", "MMM dd HH:mm:ss" ]
            timezone => "Europe/Copenhagen"
        }

        mutate {
	 	    replace => [ "message", "%{msg}" ]
        }

        #mutate {
         #  remove_field => [ "msg", "datetime" ]
        #}

        if [prog] =~ /^dhcpd$/ {
			mutate {
          		add_tag => [ "dhcpd" ]
            }
            
			grok {
	            patterns_dir => ["/etc/logstash/conf.d/patterns"]
	            match => [ "message", "%{DHCPD}"]
              }
        }

        if [prog] =~ /^filterlog$/ {
            mutate {
                remove_field => [ "msg" ]
            }

            grok {
                add_tag => [ "firewall" ]
                patterns_dir => ["/etc/logstash/conf.d/patterns"]
                match => [ "message", "%{PFSENSE_LOG_DATA}%{PFSENSE_IP_SPECIFIC_DATA}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}",
	                         "message", "%{PFSENSE_IPv4_SPECIFIC_DATA}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}",
                               "message", "%{PFSENSE_IPv6_SPECIFIC_DATA}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}"]
            }
            mutate {
                lowercase => [ 'proto' ]
                }
        }
	 }
    								 
	 if "squid" in [tags]{
		mutate{
		 remove_field=> [ "source" ]
		}
	grok {
               match => { "message" => "%{POSINT:timestamp}.%{WORD:timestamp_ms}\s+%{NUMBER:response_time} %{IP:[source][ip]} %{NUMBER:[source][port]} %{WORD:squid_request_status} %{NUMBER:[http][response][status_code]} %{NUMBER:reply_size_include_header} %{WORD:[http][request][method]} %{NOTSPACE:[url][full]} %{NOTSPACE:[url][path]} %{NUMBER:[http][version]} %{WORD:squid_response} (?:-|%{IP:[destination][ip]}) %{NOTSPACE:content_type} %{NOTSPACE:[destination][domain]}"}
         }
         }
	 if "pihole" in [tags]{
	grok {
        		patterns_dir => ["/etc/logstash/patterns"]
       		match=> { "message" => ["^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: query\[[\w]+\] %{domain:[destination][domain]} from %{clientip:[source][ip]}", "^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: reply %{domain:[destination][domain]} is %{ip:IP}", "^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: %{blocklist:BLOCKLIST} %{domain:[destination][domain]} is %{ip:IP}"]
       			}
   		}
    	}
	
	 if [destination][domain] or [destination][ip]
	 {
	 	memcached{
	 		hosts => ["127.0.0.1:11211"]
	 		get => {
				"ip-dst-%{[destination][ip]}" => "[misp][feed][ip]"
	 			"domain-%{[destination][domain]}" => "[misp][feed][domain]"
	 			"domain-%{[process][args]}" => "[misp][feed][domain]"
				
	 			}
	 	}
	
	 if [misp][feed][domain]
	 {
	 ruby {
      		init => "
			require 'net/http'
			require 'uri'
			require 'json'
			"
		code => "
			uri = URI.parse('https://192.168.30.7/attributes/restSearch')
			request = Net::HTTP::Post.new(uri)
			request.content_type = 'application/json'
			request['Accept'] = 'application/json'
			request['Authorization'] = '3P8FcSZn4cyzY2S4UHq1EUkZHbUPoDx49f1o0OMl'
			request.body = JSON.dump({
				'returnFormat' => 'json',
				'includeEventTags' => 'yes',
				'value' => event.get('[destination][domain]')
			})

		req_options = {
			use_ssl: uri.scheme == 'https',
			verify_mode: OpenSSL::SSL::VERIFY_NONE,
		}

		response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
			http.request(request)
		end
	  
	 	if response.code == '200'
         		result = JSON.parse(response.body)
			#event.set('MISP.all', result)
			mispeventinfoarr = []
			mispattributetagarr = []
			
			for e in result['response']['Attribute']
				for t in e['Tag']
				mispattributetagarr.push(t['name'])
				end
			mispeventinfoarr.push(e['Event']['info'])
			end
			event.set('[misp][tag]', mispattributetagarr.uniq)
			event.set('[misp][eventinfo]', mispeventinfoarr.uniq)
			end
     		"
		 }

	 }
	 if [misp][feed][ip]
	 {
	 ruby {
      		init => "
			require 'net/http'
			require 'uri'
			require 'json'
			"
		code => "
			uri = URI.parse('https://192.168.30.7/attributes/restSearch')
			request = Net::HTTP::Post.new(uri)
			request.content_type = 'application/json'
			request['Accept'] = 'application/json'
			request['Authorization'] = '3P8FcSZn4cyzY2S4UHq1EUkZHbUPoDx49f1o0OMl'
			request.body = JSON.dump({
				'returnFormat' => 'json',
				'includeEventTags' => 'yes',
				'value' => event.get('[destination][ip]')
			})

		req_options = {
			use_ssl: uri.scheme == 'https',
			verify_mode: OpenSSL::SSL::VERIFY_NONE,
		}

		response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
			http.request(request)
		end
	  
	 	if response.code == '200'
         		result = JSON.parse(response.body)
			#event.set('MISP.all', result)
			mispeventinfoarr = []
			mispattributetagarr = []
			
			for e in result['response']['Attribute']
				for t in e['Tag']
				mispattributetagarr.push(t['name'])
				end
			mispeventinfoarr.push(e['Event']['info'])
			end
			event.set('[misp][tag]', mispattributetagarr.uniq)
			event.set('[misp][eventinfo]', mispeventinfoarr.uniq)
			end
     		"
   	 }
	 }
	 }
	 if ![misp][feed]
	 {	
	 	mutate
	 	{
	 		add_field=> { "[misp][hit]" => "no" }	
	 	}
	 }
	 else
	 {
		 mutate
		 {
			 add_field => { "[misp][hit]" => "yes" }
		 }
	 }
	
}



output {
	
	if "squid" in [tags]{
	elasticsearch {		
		hosts => ["localhost:9200"]
		index => "sd-squidproxy"
		manage_template => false
		}
	}
	if "pihole" in [tags] {
	elasticsearch {
		hosts => ["localhost:9200"]
		index => "sd-pihole"
		manage_template => false
		}
	}			
	 if "pfsense" in [tags] {
	elasticsearch{
		hosts => ["localhost:9200"]
		index => "sd-pfsense"
	#file{
	#	path => "/var/log/logstash/std.log"
	#	codec => rubydebug
	
	}
	}
	
	#if [fileset][module] == "suricata" {
	#elasticsearch{
		#hosts => ["localhost:9200"]
		#manage_template => false
		#index => "%{[@metadata][beat]}--suricata-%{+YYYY.MM}"
		#pipeline => "%[@metadata][pipeline}}"
		#}
	#} 
}
